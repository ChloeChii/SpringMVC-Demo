<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
  <!-- 就算把filter放到servlet後面，還是會優先執行-->

  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <servlet>
    <servlet-name>DispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--配置SpringMVC 配置文件的位置和名稱-->
    <init-param>
      <param-name>contextConfigLocation</param-name> <!-- 上下文配置路徑-->
      <param-value>classpath:springMVC.xml</param-value><!-- 在resources底下要新建同名的file才會compile success-->
    </init-param>
    <load-on-startup>1</load-on-startup><!--將前端控制器DispatcherServlet的初始化時間提前到服務器啟動時-->
  </servlet>
  <servlet-mapping>
    <servlet-name>DispatcherServlet</servlet-name>
    <!-- 設置springmvc的核心控制器所能處理的請求的請求路徑
      / 匹配的請求可以是/login 或.html或.js或,css的方式請求路徑
      但是/不能匹配.jsp請求路徑的請求, jsp的本質就是一個servlet, 不需要dispatcher進行處理
      如果這裡的spring可以處理jsp請求，springmvc會把jsp請求當成一般請求, 就找不到相對應的jspmm
      /*表示所有請求，包含.jsp請求路徑的請求
      框架就是配置文件+jar包
    -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>
</web-app>
